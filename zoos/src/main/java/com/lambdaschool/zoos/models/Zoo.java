package com.lambdaschool.zoos.models;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

import javax.persistence.*;
import javax.validation.constraints.Email;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * The entity allowing interaction with the zoos table
 */
@Entity
@Table(name = "zoos")
public class Zoo
{
    /**
     * The primary key (long) of the zoos table.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long zooid;

    /**
     * The zooname (String). Cannot be null and must be unique
     */
    @Column(nullable = false,
        unique = true)
    private String zooname;

    /**
     * List of emails associated with this zoo. Does not get saved in the database directly.
     * Forms a one to many relationship with telephone. One zoo to many telephones.
     */
    @OneToMany(mappedBy = "zoo",
        cascade = CascadeType.ALL,
        orphanRemoval = true)
    @JsonIgnoreProperties(value = "zoo")
    private List<Telephone> telephones = new ArrayList<>();

    /**
     * Creates a join table joining Zoos and Animals in a Many-To-Many relations.
     * Contains a List of Animal Objects used by this zoo.
     */
    @ManyToMany()
    @JoinTable(name = "zooanimals",
        joinColumns = @JoinColumn(name = "zooid"),
        inverseJoinColumns = @JoinColumn(name = "animalid"))
    @JsonIgnoreProperties(value = "zoos")
    private Set<Animal> animals = new HashSet<>();

    /**
     * Default constructor used primarily by the JPA.
     */
    public Zoo()
    {
    }

    /**
     * Given the params, create a new zoo object
     * <p>
     * zooid is autogenerated
     *
     * @param zooname     The zooname (String) of the zoo
     */
    public Zoo(
        String zooname)
    {
        setZooname(zooname);
    }

    /**
     * Getter for zooid
     *
     * @return the zooid (long) of the zoo
     */
    public long getZooid()
    {
        return zooid;
    }

    /**
     * Setter for zooid. Used primary for seeding data
     *
     * @param zooid the new zooid (long) of the zoo
     */
    public void setZooid(long zooid)
    {
        this.zooid = zooid;
    }

    /**
     * Getter for zooname
     *
     * @return the zooname (String) lowercase
     */
    public String getZooname()
    {
        return zooname;
    }

    /**
     * setter for zooname
     *
     * @param zooname the new zooname (String) converted to lowercase
     */
    public void setZooname(String zooname)
    {
        this.zooname = zooname.toLowerCase();
    }

    /**
     * Getter for the list of telephones for this zoo
     *
     * @return the list of telephones (List(Telephone)) for this zoo
     */
    public List<Telephone> getTelephones()
    {
        return telephones;
    }

    /**
     * Setter for list of telephones for this zoo
     *
     * @param telephones the new list of telephones (List(Telephone)) for this zoo
     */
    public void setTelephones(List<Telephone> telephones)
    {
        this.telephones = telephones;
    }

    /**
     * Getter for Animals
     *
     * @return A list of the Animal objects assigned to this zoo
     */
    public Set<Animal> getAnimals()
    {
        return animals;
    }

    /**
     * Setter for Animals
     *
     * @param animals Replaces the current list of animals assigned to this zoo with this one
     */
    public void setAnimals(Set<Animal> animals)
    {
        this.animals = animals;
    }
}
